<!-- Jun   4, 2006  bpk   creation from the tail of the former chapter 14 -->

<CHAPTER>
<COPYRIGHTDATE>2006</COPYRIGHTDATE>
<COPYRIGHTHOLDER>Bradley Kjell</COPYRIGHTHOLDER> 
<AUTHORNAME>kjell at ieee dot org </AUTHORNAME>
<HOMEFILE>../../index.html#40</HOMEFILE>
<STYLESHEET>../CAIstyle.css</STYLESHEET>


<CAI>CHAPTER 40B &#8212; Truth Tables and De Morgan's Rules

<p class="revisions">
created: 06/04/06; small changes: 02/10/08, 08/23/09
</p>

<LESSON>

<AUDIO>Audio/chap40B-01.mp3</AUDIO>

<p>
Boolean expressions are used to control branches and loops
in computer programs.
Of course, branches and loops are fundamental to programming.
This chapter shows some methods for working with boolean expressions.
</p>

<h4>Chapter Topics:</h4>
<ul>
<li>Truth Tables</li>
<li>De Morgan's Rules</li>
</ul>

<p>
<b>Truth tables</b> are used to analyze boolean expressions.
<b>De Morgan's</b> rules can transform confusing boolean expressions into
easier ones.
Both of these techniques are used in programming and in computer hardware design
(and in other areas).
Questions about boolean expressions and De Morgan's Rules are
prominent on the AP Computer Science Test.
</p>

</LESSON>

<QUESTION>
<p>
(Review :) What is the value of: &nbsp; <code>x&lt;12 &amp;&amp; y&gt;10</code>
</p>

<p>
Assume that <code>x</code> contains 9  and  <code>y</code> contains 7.
</p>

</QUESTION>

</CAI>


<CAI>Review of Truth Tables

<ANSWER>

<p>
Assume that <code>x</code> contains 9  and  <code>y</code> contains 7.
</p>

<p>
The expression evaluates to <b>False</b>.
One way to show this is below.
</p>

<blockquote>
<img src="booleanExpression01.gif" alt="Boolean Expression" />
</blockquote>

</ANSWER>

<LESSON>

<AUDIO>Audio/chap40B-02.mp3</AUDIO>


<INDEX>truth table</INDEX>

<p>
A <b>truth table</b> is another way to show the evaluation of a boolean expression.
Each row of a truth table starts with a selection of truth values for the operands.
There is one row for each possible selection of truth values.
The columns show the truth value of expressions and subexpressions containing the operands.
</p>

<table border="1" bordercolor="brown" cellpadding="8">
<tr bgcolor="yellow" align="center"> <th colspan="2">Operands</th> <th>Boolean Expression</th></tr>
<tr bgcolor="lightyellow"  align="center"> <th>x &lt; 12</th> <th>y &gt; 10</th> <th>x &lt; 12 &amp;&amp; y &gt; 10 </th></tr>  
<tr align="center"> <td>F</th> <td>F</td> <td>F</td> </tr> 
<tr align="center"> <td>F</th> <td>T</td> <td>F</td> </tr>  
<tr align="center"> <td>T</th> <td>F</td> <td>F</td> </tr>  
<tr align="center"> <td>T</th> <td>T</td> <td>T</td> </tr>  
</table>

<p>
The above table has four rows for the truth values,
one row for each of the four possible choices for the two operands.
(The operands are the relational expressions <code>x&lt;12</code> and <code>y&gt;10</code>.)
The last column shows the result of the
<code>&amp;&amp;</code>  operator
with those values.
</p>

</LESSON>

<QUESTION>
<p>
What row of the table is used when <code>x</code> contains 1  and  <code>y</code> contains 23?
</p>

</QUESTION>

</CAI>


<CAI>Another Truth Table

<ANSWER>
<p>
The last row.
</p>
</ANSWER>

<LESSON>


<AUDIO>Audio/chap40B-03.mp3</AUDIO>


<p>
Here is another truth table that shows the operands combined with an <code>||</code> operator.
</p>

<form>
<table border="1" bordercolor="brown" cellpadding="8">
<tr bgcolor="yellow" align="center"> <th colspan="2">Operands</th> <th>Boolean Expression</th></tr>
<tr bgcolor="lightyellow" align="center"> <th>x &lt; 12</th> <th>y &gt; 10</th> <th>x &lt; 12 || y &gt; 10 </th></tr>  
<tr align="center"> <td>F</th> <td>F</td> <td><input type="button" name="buttonA" value="T or F ?" onClick="buttonA.value='  F   '" \></td> </tr> 
<tr align="center"> <td>F</th> <td>T</td> <td><input type="button" name="buttonB" value="T or F ?" onClick="buttonB.value='  T   '" \></td> </tr>  
<tr align="center"> <td>T</th> <td>F</td> <td><input type="button" name="buttonC" value="T or F ?" onClick="buttonC.value='  T   '" \></td> </tr>  
<tr align="center"> <td>T</th> <td>T</td> <td><input type="button" name="buttonD" value="T or F ?" onClick="buttonD.value='  T   '" \></td> </tr>  
</table>
</form>

<p>
The first several columns of a truth table show all possible boolean values of the operands.
In this table, the operands are relational expressions.
The remaining columns show how these values are combined by the logical operators.
</p>

</LESSON>

<QUESTION>
<p>
Decide on values for the last column.
</p>

</QUESTION>

</CAI>


<CAI>Conventional Order

<ANSWER>

<table border="1" bordercolor="blue" bgcolor="white" cellpadding="8">
<tr bgcolor="yellow" align="center"> <th colspan="2">Operands</th> <th>Boolean Expression</th></tr>
<tr bgcolor="lightyellow" align="center"> <th>x &lt; 12</th> <th>y &gt; 10</th> <th>x &lt; 12 || y &gt; 10 </th></tr>  
<tr align="center"> <td>F</th> <td>F</td> <td>F</td> </tr> 
<tr align="center"> <td>F</th> <td>T</td> <td>T</td> </tr> 
<tr align="center"> <td>T</th> <td>F</td> <td>T</td> </tr> 
<tr align="center"> <td>T</th> <td>T</td> <td>T</td> </tr> 
</table>
</ANSWER>

<LESSON>

<AUDIO>Audio/chap40B-04.mp3</AUDIO>

<INDEX>truth tables, row order</INDEX>
<p>
Truth tables are usually organized
by putting the operands in a conventional order.
Following this order helps prevent mistakes.
This table follows the conventional order for two operands:
</p>

<table border="1" bordercolor="blue" cellpadding="8">
<tr align="center"  bgcolor="yellow" > <th>A</th> <th>B</th> <th>expression</th></tr>  
<tr align="center"> <td>F</th> <td>F</td> <td>-</td> </tr> 
<tr align="center"> <td>F</th> <td>T</td> <td>-</td> </tr> 
<tr align="center"> <td>T</th> <td>F</td> <td>-</td> </tr> 
<tr align="center"> <td>T</th> <td>T</td> <td>-</td> </tr> 
</table>

<p>
Here, <code>A</code> and <code>B</code> represent operands. 
Often these are relational expressions such as <code>x&lt;12</code>.
The conventional order is easy to remember if you think of F as 0 and T as 1.
Arrange the rows in ascending numerical order, as follows:
</p>

<table border="1" bordercolor="blue" cellpadding="8">
<tr  bgcolor="yellow" align="center"> <th>A</th> <th>B</th> <th>expression</th></tr>  
<tr align="center"> <td>0</th> <td>0</td> <td>-</td> </tr> 
<tr align="center"> <td>0</th> <td>1</td> <td>-</td> </tr> 
<tr align="center"> <td>1</th> <td>0</td> <td>-</td> </tr> 
<tr align="center"> <td>1</th> <td>1</td> <td>-</td> </tr> 
</table>

<p>
Courses on digital logic usually use 0 for false and 1 for true and use truth tables such as the above.
The conventional order is also used with tables with more than two operands.
With three operands, a table has eight rows.
With <code>N</code> operands, a table has <code>2<sup>N</sup></code> rows.
</p>

<QUESTION>
<p>
Fill the first table with the convential order of "0" and "1"
(think about what should be in each row before you click the buttons).
Do the rows in order, starting with the top.
Then fill in the  second table with the conventional order of "T" and "F".
</p>

<form>
<table border="1" bordercolor="brown" cellpadding="12"  align="left">
<tr  bgcolor="yellow" align="center"> <th>&nbsp; &nbsp; &nbsp; A &nbsp; &nbsp; &nbsp; </th> <th>&nbsp; &nbsp; &nbsp; B&nbsp;  &nbsp; &nbsp; </th> <th>&nbsp; &nbsp; &nbsp; C&nbsp;  &nbsp; &nbsp; </th><th>- - -</th></tr>  
<tr align="center"> <td><input type="button" name="button000L" value="0 or 1 ?" onClick="button000L.value='  0   '" \></td> <td><input type="button" name="button000M" value="0 or 1 ?" onClick="button000M.value='  0   '" \></td> <td><input type="button" name="button000R" value="0 or 1 ?" onClick="button000R.value='  0   '" \></td><td> - </td></tr> 
<tr align="center"> <td><input type="button" name="button001L" value="0 or 1 ?" onClick="button001L.value='  0   '" \></td> <td><input type="button" name="button001M" value="0 or 1 ?" onClick="button001M.value='  0   '" \></td> <td><input type="button" name="button001R" value="0 or 1 ?" onClick="button001R.value='  1   '" \></td><td> - </td></tr> 
<tr align="center"> <td><input type="button" name="button010L" value="0 or 1 ?" onClick="button010L.value='  0   '" \></td> <td><input type="button" name="button010M" value="0 or 1 ?" onClick="button010M.value='  1   '" \></td> <td><input type="button" name="button010R" value="0 or 1 ?" onClick="button010R.value='  0   '" \></td><td> - </td></tr> 
<tr align="center"> <td><input type="button" name="button011L" value="0 or 1 ?" onClick="button011L.value='  0   '" \></td> <td><input type="button" name="button011M" value="0 or 1 ?" onClick="button011M.value='  1   '" \></td> <td><input type="button" name="button011R" value="0 or 1 ?" onClick="button011R.value='  1   '" \></td><td> - </td></tr> 

<tr align="center"> <td><input type="button" name="button100L" value="0 or 1 ?" onClick="button100L.value='  1   '" \></td> <td><input type="button" name="button100M" value="0 or 1 ?" onClick="button100M.value='  0   '" \></td> <td><input type="button" name="button100R" value="0 or 1 ?" onClick="button100R.value='  0   '" \></td><td> - </td></tr> 
<tr align="center"> <td><input type="button" name="button101L" value="0 or 1 ?" onClick="button101L.value='  1   '" \></td> <td><input type="button" name="button101M" value="0 or 1 ?" onClick="button101M.value='  0   '" \></td> <td><input type="button" name="button101R" value="0 or 1 ?" onClick="button101R.value='  1   '" \></td><td> - </td></tr> 
<tr align="center"> <td><input type="button" name="button110L" value="0 or 1 ?" onClick="button110L.value='  1   '" \></td> <td><input type="button" name="button110M" value="0 or 1 ?" onClick="button110M.value='  1   '" \></td> <td><input type="button" name="button110R" value="0 or 1 ?" onClick="button110R.value='  0   '" \></td><td> - </td></tr> 
<tr align="center"> <td><input type="button" name="button111L" value="0 or 1 ?" onClick="button111L.value='  1   '" \></td> <td><input type="button" name="button111M" value="0 or 1 ?" onClick="button111M.value='  1   '" \></td> <td><input type="button" name="button111R" value="0 or 1 ?" onClick="button111R.value='  1   '" \></td><td> - </td></tr> 
</table>

<table border="1" bordercolor="brown" cellpadding="12"  align="right">
<tr  bgcolor="yellow" align="center"> <th>&nbsp; &nbsp; &nbsp; A &nbsp; &nbsp; &nbsp; </th> <th>&nbsp; &nbsp; &nbsp; B&nbsp;  &nbsp; &nbsp; </th> <th>&nbsp; &nbsp; &nbsp; C&nbsp;  &nbsp; &nbsp; </th><th>- - -</th></tr>  
<tr align="center"> <td><input type="button" name="buttonX000L" value="F or T ?" onClick="buttonX000L.value='  F   '" \></td> <td><input type="button" name="buttonX000M" value="F or T ?" onClick="buttonX000M.value='  F   '" \></td> <td><input type="button" name="buttonX000R" value="F or T ?" onClick="buttonX000R.value='  F   '" \></td><td> - </td></tr> 
<tr align="center"> <td><input type="button" name="buttonX001L" value="F or T ?" onClick="buttonX001L.value='  F   '" \></td> <td><input type="button" name="buttonX001M" value="F or T ?" onClick="buttonX001M.value='  F   '" \></td> <td><input type="button" name="buttonX001R" value="F or T ?" onClick="buttonX001R.value='  T   '" \></td><td> - </td></tr> 
<tr align="center"> <td><input type="button" name="buttonX010L" value="F or T ?" onClick="buttonX010L.value='  F   '" \></td> <td><input type="button" name="buttonX010M" value="F or T ?" onClick="buttonX010M.value='  T   '" \></td> <td><input type="button" name="buttonX010R" value="F or T ?" onClick="buttonX010R.value='  F   '" \></td><td> - </td></tr> 
<tr align="center"> <td><input type="button" name="buttonX011L" value="F or T ?" onClick="buttonX011L.value='  F   '" \></td> <td><input type="button" name="buttonX011M" value="F or T ?" onClick="buttonX011M.value='  T   '" \></td> <td><input type="button" name="buttonX011R" value="F or T ?" onClick="buttonX011R.value='  T   '" \></td><td> - </td></tr> 

<tr align="center"> <td><input type="button" name="buttonX100L" value="F or T ?" onClick="buttonX100L.value='  T   '" \></td> <td><input type="button" name="buttonX100M" value="F or T ?" onClick="buttonX100M.value='  F   '" \></td> <td><input type="button" name="buttonX100R" value="F or T ?" onClick="buttonX100R.value='  F   '" \></td><td> - </td></tr> 
<tr align="center"> <td><input type="button" name="buttonX101L" value="F or T ?" onClick="buttonX101L.value='  T   '" \></td> <td><input type="button" name="buttonX101M" value="F or T ?" onClick="buttonX101M.value='  F   '" \></td> <td><input type="button" name="buttonX101R" value="F or T ?" onClick="buttonX101R.value='  T   '" \></td><td> - </td></tr> 
<tr align="center"> <td><input type="button" name="buttonX110L" value="F or T ?" onClick="buttonX110L.value='  T   '" \></td> <td><input type="button" name="buttonX110M" value="F or T ?" onClick="buttonX110M.value='  T   '" \></td> <td><input type="button" name="buttonX110R" value="F or T ?" onClick="buttonX110R.value='  F   '" \></td><td> - </td></tr> 
<tr align="center"> <td><input type="button" name="buttonX111L" value="F or T ?" onClick="buttonX111L.value='  T   '" \></td> <td><input type="button" name="buttonX111M" value="F or T ?" onClick="buttonX111M.value='  T   '" \></td> <td><input type="button" name="buttonX111R" value="F or T ?" onClick="buttonX111R.value='  T   '" \></td><td> - </td></tr> 
</table>
<br clear= "all" />

<p>
&nbsp;
</p>

</form>

</QUESTION>

</CAI>

<CAI>Computer Purchase Problem

<ANSWER>

<table  width="30%" border="1" bordercolor="blue" bgcolor="white" cellpadding="8"  align="left">
<tr   bgcolor="yellow" align="center"> <th>A</th> <th>B</th> <th>C</th> <th>-</th></tr>  
<tr align="center"> <td>0</th> <td>0</th> <td>0</td> <td>-</td> </tr> 
<tr align="center"> <td>0</th> <td>0</th> <td>1</td> <td>-</td> </tr> 
<tr align="center"> <td>0</th> <td>1</th> <td>0</td> <td>-</td> </tr> 
<tr align="center"> <td>0</th> <td>1</th> <td>1</td> <td>-</td> </tr> 
<tr align="center"> <td>1</th> <td>0</th> <td>0</td> <td>-</td> </tr> 
<tr align="center"> <td>1</th> <td>0</th> <td>1</td> <td>-</td> </tr> 
<tr align="center"> <td>1</th> <td>1</th> <td>0</td> <td>-</td> </tr> 
<tr align="center"> <td>1</th> <td>1</th> <td>1</td> <td>-</td> </tr> 
</table>

<table   width="30%" border="1" bordercolor="blue" bgcolor="white" cellpadding="8"  align="right">
<tr   bgcolor="yellow" align="center"> <th>A</th> <th>B</th> <th>C</th> <th>-</th></tr>  
<tr align="center"> <td>F</th> <td>F</th> <td>F</td> <td>-</td> </tr> 
<tr align="center"> <td>F</th> <td>F</th> <td>T</td> <td>-</td> </tr> 
<tr align="center"> <td>F</th> <td>T</th> <td>F</td> <td>-</td> </tr> 
<tr align="center"> <td>F</th> <td>T</th> <td>T</td> <td>-</td> </tr> 
<tr align="center"> <td>T</th> <td>F</th> <td>F</td> <td>-</td> </tr> 
<tr align="center"> <td>T</th> <td>F</th> <td>T</td> <td>-</td> </tr> 
<tr align="center"> <td>T</th> <td>T</th> <td>F</td> <td>-</td> </tr> 
<tr align="center"> <td>T</th> <td>T</th> <td>T</td> <td>-</td> </tr> 
</table>

<div class="clearfloats"> &nbsp; </div>

</ANSWER>


<LESSON>

<AUDIO>Audio/chap40B-05.mp3</AUDIO>

<p>
Say that you are shopping for a new computer. 
You will reject any computer that does not meet your minimum requirements.
You require: speed of <u>more than</u> 2000 MHz and <u>more than</u> 512 Meg of memory.
</p>

<pre class="code">
if (  <span class="blue">______</span>(speed &gt; 2000 &amp;&amp memory &gt; 512)  )
  System.out.println("Reject this computer");
else
  System.out.println("Acceptable computer");
</pre>


</LESSON>

<QUESTION>
<p>
What should go in the blank so that the program fragment is correct?
</p>

<p>
(Hint: remember the NOT operator.)
</p>

</QUESTION>

</CAI>



<CAI>Truth Table
<ANSWER>
<pre class="code">
if (  <span class="red"><big><b>!</b></big></span>(speed &gt; 2000 &amp;&amp memory &gt; 512)  )
  System.out.println("Reject this computer");
else
  System.out.println("Acceptable computer");
</pre>

</ANSWER>

<LESSON>

<AUDIO>Audio/chap40B-06.mp3</AUDIO>

<p>
Consider a computer with 2200 MHz speed and 750 Meg of memory.
This computer is not rejected.
Evaluation  proceeds like this:
</p>

<div align="center">
<img src="booleanExpression02.gif" alt="Boolean Expression" />
</div>


<p>
A truth table  is another way to analyze the expression.
The first two columns are filled with the possible truth values of the relational expressions.
The remaining cells show how these truth values are combined.
</p>


<form>
<table border="1" bordercolor="brown" cellpadding="8">
<tr bgcolor="yellow" align="center"> <th>speed &gt; 2000</th> <th>memory &gt; 512</th> <th> speed &gt; 2000 &amp;&amp; memory &gt; 512</th> <th> <big>!</big> (speed &gt; 2000 &amp;&amp; memory &gt; 512)</th> </tr>
<tr align="center"> <td>F</th> <td>F</td> <td><input type="button" name="buttonA" value="T or F ?" onClick="buttonA.value='  F   '" \></td> <td><input type="button" name="buttonE" value="T or F ?" onClick="buttonE.value='  T   '" \></td></tr>
<tr align="center"> <td>F</th> <td>T</td> <td><input type="button" name="buttonB" value="T or F ?" onClick="buttonB.value='  F   '" \></td> <td><input type="button" name="buttonF" value="T or F ?" onClick="buttonF.value='  T   '" \></td></tr>
<tr align="center"> <td>T</th> <td>F</td> <td><input type="button" name="buttonC" value="T or F ?" onClick="buttonC.value='  F   '" \></td> <td><input type="button" name="buttonG" value="T or F ?" onClick="buttonG.value='  T   '" \></td></tr>
<tr align="center"> <td>T</th> <td>T</td> <td><input type="button" name="buttonD" value="T or F ?" onClick="buttonD.value='  T   '" \></td> <td><input type="button" name="buttonH" value="T or F ?" onClick="buttonH.value='  F   '" \></td></tr>
</table>
</form>

<p>
If <code>speed</code> is 2200 and <code>memory</code> is 750 the
the fourth row of the table is selected. 
The last column shows that this computer is not rejected.
All computers are rejected except for those that meet both requirements,
corresponding to the last row of the table.
</p>


</LESSON>

<QUESTION>
<p>
Does the following program fragment do the same thing as the original fragment?
</p>


<pre class="code">
boolean reject = <big><b>!</b></big>(speed &gt; 2000 &amp;&amp; memory &gt; 512);

if (  reject  )
  System.out.println("Reject this computer");
else
  System.out.println("Acceptable computer");
</pre>

</QUESTION>

</CAI>

<CAI>Precidence of NOT
<ANSWER>

<p>
Yes. Sometimes boolean variables like <code>reject</code> are used
to record a decision that might be used in several places in the program.
</p>
</ANSWER>


<LESSON>


<AUDIO>Audio/chap40B-07.mp3</AUDIO>

<p>
The NOT operator has high precedence.
It is done before arithmetic and relational operators
unless you use parentheses.
Examine the following:
</p>

<pre>
<big><b>!</b></big>speed &gt; 2000   &amp;&amp;   memory &gt; 512
------  
illegal: can't use <big><b>!</b></big> on an arithmetic variable
</pre>

<p>
Since <code><big><b>!</b></big></code> has high precedence,
the above says to apply it to
<code>speed</code>.
This which won't work, because <code>speed</code> is an integer and
<code><big><b>!</b></big></code> applies only to boolean values.
When parentheses are used
</p>

<pre>
<big><b>!</b></big>(speed &gt; 2000   &amp;&amp;   memory &gt; 512)
</pre>

<p>
the <code><big><b>!</b></big></code> is the last operation done, and is applied to the boolean value of the
expression inside parentheses.
</p>

<p>
Expressions that involve a NOT operator are often hard to read.
A confusing expression can be sometimes be rewritten 
to eliminate the NOT.
</p>

</LESSON>

<QUESTION>
<p>
Look at the original fragment:
</p>

<pre class="code">
if ( <big><b>!</b></big>(  speed &gt; 2000   &amp;&amp;   memory &gt; 512 ) )
  System.out.println("Reject this computer");
else
  System.out.println("Acceptable computer");
</pre>

<p>
Does the following do the same thing?
</p>

<pre class="code">
if (  speed &lt;= 2000 || memory &lt;= 512 )
  System.out.println("Reject this computer");
else
  System.out.println("Acceptable computer");
</pre>

<p>
Use some example values for <code>speed</code> 
and <code>memory</code> and   figure out what each fragment does.
</p>

</QUESTION>

</CAI>

<CAI>Equivalent Boolean Expressions

<ANSWER>
<p>
Yes. The two fragments are equivalent. It may have taken you a while to figure this
out, and you may not be completely convinced.
</p>
</ANSWER>


<LESSON>

<AUDIO>Audio/chap40B-08.mp3</AUDIO>

<p>
To  decide if the two fragments are equivalent, 
pick some example values for <code>speed</code>
and <code>memory</code> and see if the expressions evaluate the to the same boolean values.
A systematic way of doing this is with a truth table.
To start, look at the "speed" question:
</p>

<table border="1" bordercolor="brown" cellpadding="8">
<tr bgcolor="yellow" align="center"> <th>speed &gt; 2000</th> <th>speed &lt;= 2000</th></tr>
<tr align="center"> <td>F</td> <td>T</td> </tr>
<tr align="center"> <td>T</td> <td>F</td> </tr>
</table>


<p>
If it is False that the speed greater than 2000, then it is True that the speed is less than or equal to 2000.
</p>

<p>
If it is True that the speed greater than 2000, then it is False that the speed is less than or equal to 2000.
</p>

<p>
Only one of <code>X&gt;Y</code> and  <code>X&lt;=Y</code> can be true for particular values of X and Y.
</p>

<p>
Another way to say this is <code>!(X&gt;Y)</code> and  <code>X&lt;=Y</code> are equivalent.
The last two columns of the following table show equivalent expressions.
</p>


<table border="1" bordercolor="brown" cellpadding="8">
<tr bgcolor="yellow" align="center"> <th>speed &gt; 2000</th> <th>!(speed &gt; 2000)</th><th>speed &lt;= 2000</th></tr>
<tr align="center"> <td>F</td> <td>T</td> <td>T</td> </tr>
<tr align="center"> <td>T</td> <td>F</td> <td>F</td> </tr>
</table>


<p>
It is also true that <code>X&gt;Y</code> and  <code>!(X&lt;=Y)</code> are equivalent.
This is demonstrated in the following question.
</p>

<QUESTION>

<p>
Fill in the following table. Fill the cells of a row so they are consistent
with the first cell of the row.
</p>

<form>
<table border="1" bordercolor="blue" cellpadding="8">
<tr bgcolor="yellow" align="center"> <th>speed &gt; 2000</th> <th>(speed &lt;= 2000)</th><th>!(speed &lt;= 2000)</th></tr>
<tr align="center"> <td>F</td> <td><input type="button" name="buttonA" value="T or F ?" onClick="buttonA.value='  T   '" \></td> <td><input type="button" name="buttonB" value="T or F ?" onClick="buttonB.value='  F   '" \></td> </tr>
<tr align="center"> <td>T</td> <td><input type="button" name="buttonC" value="T or F ?" onClick="buttonC.value='  F   '" \></td> <td><input type="button" name="buttonD" value="T or F ?" onClick="buttonD.value='  T    '" \></td> </tr>
</table>
</form>

<p>
The first column and the last column have the same T/F values, which shows that
<code>speed &gt; 2000</code> is equivalent to <nobr><code>!(speed &lt;= 2000)</code>.</nobr>
</p>

</QUESTION>



</CAI>

<CAI>Equivalent Boolean Expressions

<ANSWER>

<table border="1" bordercolor="blue" bgcolor="white" cellpadding="8">
<tr bgcolor="yellow" align="center"> <th>speed &gt; 2000</th> <th>(speed &lt;= 2000)</th><th>!(speed &lt;= 2000)</th></tr>
<tr align="center"> <td>F</td> <td>T</td> <td>F</td> </tr>
<tr align="center"> <td>T</td> <td>F</td> <td>T</td> </tr>
</table>

</ANSWER>


<LESSON>

<AUDIO>Audio/chap40B-09.mp3</AUDIO>

<p>
The original program fragment used this boolean expression
</p>

<pre>
!(speed &gt; 2000 &amp;&amp; memory &gt; 512)
</pre>

<p>
which is explained in the following truth table (repeated from a previous page):
</p>


<table border="1" bordercolor="brown" cellpadding="8">
<tr bgcolor="yellow" align="center"> <th>speed &gt; 2000</th> <th>memory &gt; 512</th> <th> speed &gt; 2000 &amp;&amp; memory &gt; 512</th> <th> !(speed &gt; 2000 &amp;&amp; memory &gt; 512)</th> </tr>
<tr align="center"> <td>F</th> <td>F</td> <td>F</td> <td>T</td></tr>
<tr align="center"> <td>F</th> <td>T</td> <td>F</td> <td>T</td></tr>
<tr align="center"> <td>T</th> <td>F</td> <td>F</td> <td>T</td></tr>
<tr align="center"> <td>T</th> <td>T</td> <td>T</td> <td>F</td></tr>
</table>

<p>
An equivalent program fragment used this boolean expression
</p>

<pre>
speed &lt;= 2000 || memory &lt;= 512
</pre>


<p>
which is explained in the following truth table:
</p>


<table border="1" bordercolor="brown" cellpadding="8">
<tr bgcolor="yellow" align="center"> <th>speed &gt; 2000</th> <th>memory &gt; 512</th>   
     <th>speed &lt;= 2000</th> <th>memory &lt;= 512</th> <th> speed &lt;= 2000 || memory &lt;= 512</th>  </tr> 
<tr align="center"> <td>F</th> <td>F</td> <td>T</td> <td>T</td> <td>T</td></tr>
<tr align="center"> <td>F</th> <td>T</td> <td>T</td> <td>F</td> <td>T</td></tr>
<tr align="center"> <td>T</th> <td>F</td> <td>F</td> <td>T</td> <td>T</td></tr>
<tr align="center"> <td>T</th> <td>T</td>  <td>F</td> <td>F</td> <td>F</td></tr>
</table>

<p>
Each table has the same first two columns.
The true/false values in the last column of each table are the same,
which shows that the two boolean expressions are equivalent.
One expression can be used in place of the other in a program.
</p>


<QUESTION>
<p>
Is there only one correct way to write an <code>if</code> statement in a program?
</p>
</QUESTION>


</CAI>

<CAI>Equivalent Statements

<ANSWER>
<p>
Usually there are many equivalent ways to write an <code>if</code> statement.
</p>
</ANSWER>

<LESSON>

<AUDIO>Audio/chap40B-10.mp3</AUDIO>

<p>
Here is the original fragment, which uses AND:
</p>

<pre class="code">
if (  <big><b>!</b></big>(speed &gt; 2000 &amp;&amp memory &gt; 512)  )
  System.out.println("Reject this computer");
else
  System.out.println("Acceptable computer");
</pre>

<p>
Here is an equivalent fragement that uses OR:
</p>

<pre class="code">
if (  speed &lt;= 2000  ||  memory &lt;= 512 )
  System.out.println("Reject this computer");
else
  System.out.println("Acceptable computer");
</pre>

<p>
Yet another equivalent fragment reverses the order of the <em>true</em> and
<em>false</em> branches of the statement.
</p>

<pre class="code">
if (  speed &gt; 2000  &amp;&amp;  memory &gt; 512 )
  System.out.println("Acceptable computer");
else
  System.out.println("Reject this computer");
</pre>

<p>
The last fragment is probably the best choice because it is the easiest
to read.
It follows the pattern:
</p>

<pre class="code">
if ( <em>expression that returns "true" for the desired condition</em> )
  <em>perform the desired action</em>
else
  <em>perform some other action</em>
</pre>

<p>
Generally, people find statements that involve NOT to be confusing.
Avoid using using NOT, if you can.
If NOTs are needed, try to apply them to small subexpressions, only.
</p>

</LESSON>

<QUESTION>
<p>
Rewrite the following natural language statment into an equivalent
easily understood statement.
</p>

<blockquote>
It is not true that robins are not seen when the weather is not fair.
</blockquote>

</QUESTION>

</CAI>

<CAI>Not Not <br /><font size="-5">Who's there?</font>

<ANSWER>

<blockquote>
It is not true that robins are not seen when the weather is not fair.<br>
Robins are seen when the weather is not fair.<br>
Robins are seen when the weather is poor.<br>
</blockquote>


</ANSWER>

<LESSON>

<AUDIO>Audio/chap40B-11.mp3</AUDIO>

<p>
It is useful to have some rules for rewriting boolean expressions.
Here is an easy one:
</p>

<pre class="program">
<blockquote>
<code>!!A</code> is equivalent to <code>A</code>
</blockquote>
</pre>

<p>
The operand <b>A</b> stands for a true/false value or an expression that results in a true/false value.
This truth table   shows the rule:
</p>

<table  border="1" bordercolor="brown" bgcolor="white"  cellpadding="10">
<tr bgcolor="yellow" align="center"><th>A</th><th>!A</th><th>!!A</th></tr>
<tr align="center"><td>false</td><td>true</td><td>false</td></tr>
<tr align="center"><td>true</td><td>false</td><td>true</td></tr>
</table>

<p>
&nbsp;
</p>

</LESSON>

<QUESTION>

<p>
Rewrite the following <code>if</code> statement:
</p>

<pre>
if ( !(value != 399) )
  System.out.println("Correct Value");
else
  System.out.println("Wrong Value");
</pre>
</QUESTION>

</CAI>


<CAI>Equivalent Relational Expressions

<ANSWER>

<pre>
if ( value == 399 )
  System.out.println("Correct Value");
else
  System.out.println("Wrong Value");
</pre>
</ANSWER>


<LESSON>

<AUDIO>Audio/chap40B-12.mp3</AUDIO>

<p>
In the following, <code>X</code> and <code>Y</code> represent numbers that can be compared.
</p>

<table  border="1" bordercolor="brown" bgcolor="white"  cellpadding="15">
<tr bgcolor="yellow" align="center"><th>Expression</th><th>Equivalent</th><th>&nbsp</th><th>Expression</th><th>Equivalent</th></tr>
<tr align="center"><td>!(X &lt; Y)</td><td>X &gt;= Y</td>  <td>&nbsp;</td> <td>!(X &gt;= Y)</td> <td>X &lt; Y</td></tr>
<tr align="center"><td>!(X &gt; Y)</td><td>X &lt;= Y</td>  <td>&nbsp;</td> <td>!(X &lt;= Y)</td> <td>X &gt; Y</td></tr>
<tr align="center"><td>!(X == Y)</td><td>X != Y</td>  <td>&nbsp;</td> <td>!(X != Y)</td> <td>X == Y</td></tr>
</table>

<p>
Usually if you have an expression that uses a NOT operator, 
replace it with an equivalent comparison that does not use a NOT.
If this is not possible, rewrite the expression so that the NOT
applies to the smallest subexpression possible.
</p>

</LESSON>

<QUESTION>

<p>
Rewrite the following <code>if</code> statement:
</p>

<pre>
if ( !(car.price &gt; 8000 ) )
  System.out.println("Affordable");
else
  System.out.println("Too Expensive!");
</pre>

</QUESTION>

</CAI>


<CAI>De Morgan's Rules

<ANSWER>

<pre>
if ( car.price &lt;= 8000 )
  System.out.println("Affordable");
else
  System.out.println("Too Expensive!");
</pre>
</ANSWER>


<LESSON>

<AUDIO>Audio/chap40B-13.mp3</AUDIO>

<INDEX>De Morgan, Rules</INDEX>

<p>
Augustus De Morgan was a nineteenth century British mathematician 
who showed the importance of several rules of logic.
Two of these,
<nobr><b>De Morgan's Rules</b></nobr>, show how the NOT operator can be moved to the inside of an expression.
(Although these rules are named after De Morgan, they were, in fact, known to Aristotle.)
</p>

<pre class="program">
<blockquote>
<code>!(A &amp;&amp; B)</code> is equivalent to <code>!A || !B</code>
<br/>
<br/>
<code>!(A || B)</code> is equivalent to <code>!A &amp;&amp; !B</code>
</blockquote>
</pre>


<p>
These rules are very useful, and worth your time to memorize.
This truth table shows why the first rule is true.
</p>

<table border="1" bordercolor="brown" cellpadding="15">
<tr bgcolor="yellow" align="center"> <th>A</th> <th>B</th> <th>(A &amp;&amp; B)</th> <th>!(A &amp;&amp; B)</th> <th>!A</th> <th>!B</th> <th>!A || !B</th></tr> 
<tr align="center"> <td>F</th> <td>F</td> <td>F</td> <td><b>T</b></td> <td>T</td> <td>T</td> <td><b>T</b></td></tr>
<tr align="center"> <td>F</th> <td>T</td> <td>F</td> <td><b>T</b></td> <td>T</td> <td>F</td> <td><b>T</b></td></tr>
<tr align="center"> <td>T</th> <td>F</td> <td>F</td> <td><b>T</b></td> <td>F</td> <td>T</td> <td><b>T</b></td></tr>
<tr align="center"> <td>T</th> <td>T</td> <td>T</td> <td><b>F</b></td> <td>F</td> <td>F</td> <td><b>F</b></td></tr>
</table>

<INDEX>Aristotle</INDEX>
<p>
The fourth column and the last column have the same truth values. 
This shows the the expressions at
the top of those columns are equivalent.
</p>

</LESSON>


<QUESTION>
<p>
Rewrite the following fragment (from a previous example):
</p>

<pre>
boolean reject =  !(speed &gt; 2000 &amp;&amp; memory &gt; 512)
</pre>

</QUESTION>

</CAI>



<CAI>Another Demonstration 

<ANSWER>

<p>
Using the  De Morgan Rule
</p>

<blockquote>
<code>!(A &amp;&amp; B)</code> is equivalent to <code>!A || !B</code><br>
</blockquote>

<p>the original expression
</p>

<pre>
boolean reject = !(speed &gt; 2000 &amp;&amp; memory &gt; 512)
</pre>

<p>
is equivalent to
</p>

<pre>
boolean reject = !(speed &gt; 2000) || !(memory &gt; 512)
</pre>

<p>
which is equivalent to
</p>

<pre>
boolean reject = (speed &lt;= 2000) || (memory &lt;= 512)
</pre>

</ANSWER>

<LESSON>

<AUDIO>Audio/chap40B-14.mp3</AUDIO>

<p>
Here is the other De Morgan rule: 
</p>

<blockquote>
<code>!(A || B)</code> is equivalent to <code>!A &amp;&amp; !B</code>
</blockquote>

<p>
This truth table shows why this rule is true.
</p>

<table border="1" bordercolor="brown" cellpadding="15">
<tr bgcolor="yellow" align="center">  <th>A</th>  <th>B</th>  <th>(A || B)</th>  <th>!(A || B)</th>  <th>!A</th>  <th>!B</th>  <th>!A &amp;&amp; !B</th></tr> 
<tr align="center"> <td>F</th> <td>F</td> <td>F</td> <td><b>T</b></td> <td>T</td> <td>T</td> <td><b>T</b></td></tr>
<tr align="center"> <td>F</th> <td>T</td> <td>T</td> <td><b>F</b></td> <td>T</td> <td>F</td> <td><b>F</b></td></tr>
<tr align="center"> <td>T</th> <td>F</td> <td>T</td> <td><b>F</b></td> <td>F</td> <td>T</td> <td><b>F</b></td></tr>
<tr align="center"> <td>T</th> <td>T</td> <td>T</td> <td><b>F</b></td> <td>F</td> <td>F</td> <td><b>F</b></td></tr>
</table>

<p>
The fourth and the last column have the same truth values, which shows that the expressions at
the top of those columns are equivalent.
</p>
</LESSON>



<QUESTION>
<p>
Rewrite the following fragment:
</p>

<pre>
while ( !(input.equals( "quit" ) || (count &gt; limit)) ) 
{
   . . . 
}
</pre>

</QUESTION>

</CAI>

<CAI>Oil Change

<ANSWER>

<p>
Using the  De Morgan Rule
</p>

<blockquote>
<code>!(A || B)</code> is equivalent to <code>!A &amp;&amp; !B</code>
</blockquote>

<p>
The original expression
</p>

<pre>
while ( !(input.equals( "quit" ) || (count &gt; limit)) ) 
{
   . . . 
}
</pre>

<p>
is equivalent to
</p>

<pre>
while ( !input.equals( "quit" ) &amp;&amp; !(count &gt; limit)) ) 
{
   . . . 
}
</pre>

<p>
which is equivalent to
</p>


<pre>
while ( !input.equals( "quit" ) &amp;&amp; (count &lt;= limit)) ) 
{
   . . . 
}
</pre>


</ANSWER>

<LESSON>

<AUDIO>Audio/chap40B-15.mp3</AUDIO>

<p>
The owner's manual for a car says to change the oil every three months or every 3000 miles.
</p>

<pre>
boolean newOilNeeded =  months &gt;= 3 || miles &gt;= 3000 ; 
</pre>

<p>
Here is an expression that shows when no oil change is necessary:
</p>


<pre>
boolean oilOK =  !( months &gt;= 3 || miles &gt;= 3000 ); 
</pre>

</LESSON>

<QUESTION>
<p>
Rewrite the expression using one of De Morgan's rules.
Do this in two steps.
In the first step, don't change the relational expressions.
</p>

<pre>
boolean oilOK =  <input type="text" name="textA" size="50"> 
</pre>

<p>
Now further simplify by changing the relational expressions.
</p>

<pre>
boolean oilOK =  <input type="text" name="textB" size="50"> 
</pre>


</QUESTION>

</CAI>

<CAI>Free Shipping

<ANSWER>

<p>
Using the  De Morgan Rule
</p>

<blockquote>
<code>!(A || B)</code> is equivalent to <code>!A &amp;&amp; !B</code>
</blockquote>

<p>
The expression
</p>

<pre>
boolean oilOK =  !( months &gt;= 3 || miles &gt;= 3000 ); 
</pre>

<p>
is equivalent to
</p>

<pre>
boolean oilOK =  !( months &gt;= 3 ) &amp;&amp; !( miles &gt;= 3000 ); 
</pre>

<p>
which can be further transformed to
</p>


<pre>
boolean oilOK =  ( months &lt;  3 ) &amp;&amp;  ( miles &lt;  3000 ); 
</pre>

</ANSWER>

<LESSON>

<AUDIO>Audio/chap40B-16.mp3</AUDIO>

<p>
For an on-line shopping site, shipping is free for purchases of $50 or more,
unless the merchandise is on sale.
</p>

<pre>
boolean freeShipping =  purchase &gt;= 50 &amp;&amp; !onSale; 
</pre>

<p>
Here is an expression that shows when to charge for shipping:
</p>


<pre>
boolean shipping =  !( purchase &gt;= 50 &amp;&amp; !onSale ); 
</pre>

<p>
Assume that <code>onSale</code> is a boolean variable.
</p>

</LESSON>

<QUESTION>

<p>
Rewrite this expression in two steps.
In the first step, apply De Morgan's rule that <nobr><code>!(A &amp;&amp; B)</code></nobr> 
is equivalent to <nobr><code>!(A) || !(B)</code></nobr>.
</p>

<pre>
boolean shipping =  <input type="text" name="textA" size="50"> 
</pre>

<p>
In the second step, rewrite the relational expression:
</p>

<pre>
boolean shipping =  <input type="text" name="textB" size="50"> 
</pre>

</QUESTION>

</CAI>

<CAI>Full Price Hotel

<ANSWER>

<p>
Using the  De Morgan Rule
</p>

<blockquote>
<code>!(A &amp;&amp; B)</code> is equivalent to <code>!A || !B</code>
</blockquote>

<p>
The expression
</p>

<pre>
boolean shipping =  !(purchase &gt;= 50 &amp;&amp; !onSale ); 
</pre>

<p>
is equivalent to
</p>

<pre>
boolean shipping =  !(purchase &gt;= 50) || !!onSale ; 
</pre>

<p>
which can be further transformed to
</p>

<pre>
boolean shipping =  purchase &lt; 50  || onSale ; 
</pre>
</ANSWER>

<LESSON>

<AUDIO>Audio/chap40B-17.mp3</AUDIO>

<p>
A hotel charges full price for its rooms during the "on season" when a reservation
is made less than 14 days in advance.
Otherwise, a reservation qualifies for a discount.
</p>

<pre>
boolean fullFare = (days &lt; 14) &amp;&amp; onSeason;
</pre> 

<p>
Assume that <code>onSeason</code> is a boolean variable.
Here is an expression that says when a discount rate may be available:
</p>

<pre>
boolean discount = !( (days &lt; 14) &amp;&amp; onSeason );
</pre> 

</LESSON>

<QUESTION>

<p>
Rewrite this expression in two steps.
In the first step, apply De Morgan's rule that <nobr><code>!(A&amp;&amp;B)</code></nobr> 
is equivalent to <nobr><code>!(A)||!(B)</code></nobr>.
</p>

<pre>
boolean discount =  <input type="text" name="textC" size="50"> 
</pre>

<p>
In the second step, rewrite the relational expression:
</p>

<pre>
boolean discount =  <input type="text" name="textD" size="50"> 
</pre>
</QUESTION>

</CAI>

<CAI>More De Morgan

<ANSWER>

<p>
Using the  De Morgan Rule
</p>

<blockquote>
<code>!(A &amp;&amp; B)</code> is equivalent to <code>!A || !B</code>
</blockquote>

<p>
The expression
</p>

<pre>
boolean discount =  !( (days &lt; 14) &amp;&amp; onSeason );
</pre>

<p>
is equivalent to
</p>

<pre>
boolean discount =  !(days &lt; 14) || !onSeason ; 
</pre>

<p>
which can be further transformed to
</p>

<pre>
boolean discount =  days &gt;= 14  || !onSeason ; 
</pre>
</ANSWER>

<LESSON>

<AUDIO>Audio/chap40B-18.mp3</AUDIO>


<INDEX>De Morgan, Rules, three operand</INDEX>
<p>
De Morgan's rules can be extended to  three operands:
</p>

<blockquote>
<code>!(A &amp;&amp; B &amp;&amp; C)</code> is equivalent to <code>!A || !B || !C</code><br>

<code>!(A || B || C)</code> is equivalent to <code>!A &amp;&amp; !B &amp;&amp; !C</code>
</blockquote>

<p>
Expressions with more than three operands behave similarly.
</p>

</LESSON>

<QUESTION>
<p>
A driver holding a learner's permit may drive a car only during daylight hours  
and only if accompanied by a licensed driver of age 21 or over.  
</p>

<pre>
boolean drivingOK = daylight &amp;&amp; passenger.age &gt;= 21  &amp;&amp; passenger.licensed;
</pre>

<p>
Assume that <code>passenger</code> refers to an object with an integer member <code>age</code>
and a boolean member <code>licensed</code>.
Here is an expression that says when driving is not permitted:
</p>


<pre>
boolean noDriving = !(daylight &amp;&amp; passenger.age &gt;= 21  &amp;&amp; passenger.licensed );
</pre>

<p>
Transform this into a simpler expression.
</p>

</QUESTION>

</CAI>

<CAI>Not at the Beginning and Not in the Middle of the Chapter

<ANSWER>

<p>
Using the  De Morgan Rule
</p>

<blockquote>
<code>!(A &amp;&amp; B &amp;&amp; C)</code> is equivalent to <code>!A || !B || !C</code>
</blockquote>

<p>
The expression
</p>

<pre>
boolean noDriving = !(daylight &amp;&amp; passenger.age &gt;= 21  &amp;&amp; passenger.licensed );
</pre>

<p>
is equivalent to
</p>

<pre>
boolean noDriving = !daylight || !(passenger.age &gt= 21) ||  !passenger.licensed ;
</pre>

<p>
which can be further transformed to
</p>

<pre>
boolean noDriving = !daylight || passenger.age &lt; 21 ||  !passenger.licensed ;
</pre>
</ANSWER>


<LESSON>

<AUDIO>Audio/chap40B-19.mp3</AUDIO>

<p>
If you are not interested or do not have the time, 
you may not wish to review the following.
</p>

<ul>
<li>
<GOTO>truth table</GOTO> Truth tables.
</li>

<li>
<GOTO>truth tables, row order</GOTO> Conventional order of truth table rows.
</li>

<li>
<GOTO>De Morgan, Rules</GOTO>De Morgan's Rules with two operands.
</li>

<li>
<GOTO>De Morgan, Rules, three operand</GOTO> De Morgan's Rules with three operands.
</li>

</ul>

</LESSON>

</CAI>

</CHAPTER>



